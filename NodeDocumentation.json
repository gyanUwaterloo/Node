{
    "Node":{
        "global Object contains ?":"module, process, __filename, __dirname, require.....",
        "Global Objects":[
            "Common js module pattern alllows us to import files and mdules from other files",
            "require: load external modules -external or created",
            "exports",
            "path module: ships with node, tools to work with path strings",
            "path: `the file name is ${path.basename(__filename)}`",
            "Process: can be accesed globally, environment, current thread, parent process, stdin,stdout etc...",
            "process.argv: argument that is send to terminal"
        ],
        "Process: StdIn and out":[
            "Communicate with process while it is running",
            "stout is a writable steram",
            "StdIn is an Async function and by default takes in string in a steraming fashin",
            "Stdout is the same as console.log",
            "Ex: process.stdin.on(data, data => { function }",
            "process.stdout.write( >>);"
        ],
        "Timer using Async":[
            "Settimeout, clearTimeout, setInterval, clearInterval => is available globally",
            "Other importanat functions: clearInterval(interval); interval is handle to setInterval",
            "interval = setInterval(printTime,1000);",
            "process.stdout.clearLine();, process.stdout.cursorTo(0);"
        ],
        "Using require":[
            "const path = require('path') => const dirUploads = path.join(__dirname,'www','files','uploads')",
            "const util =require('util') => util.log(path.basename(__filename)) => You get a timestamo for logging Automatically",
            "const v8 = require('v8') => util.log(v8.getHeapStistics()) => Memory status",
            "All functions can be destructured out of the modules: => Ex. const {getHeapStatistics} = require('v8') "
        ],
        "Core Modules":[
            "readLine: interface around readble nad writable streams",
            "const readline = require('readline')",
            "const rl = readline.createInterface({ Object for specifyong input and outpt streams}) => it is a handle to the interface objct of readline",
            "readlineInterface({ input: process.stdin, output: process.stdout})",
            "rl.question('enter your name?', callback function)",
            "Callback function:  answer => { console.log('your Answer: ${answer}')}"
        ],
        "General flow in Async calls":[
            "A list of objects is pased to fuction, along with a call back fuction that triggers when job is over",
            "module.exports{}"
        ],
        "Event emitter":[
            "Pub SUB design for emitting custom events and wiring up listeners and hadlers for events",
            "These events are raised Asyn way"
        ],
        "File Systems Basics":[
            "const fs = require('fs')",
            "Other fs.readfileSysn(file, encoding,)",
            "fs.readfile(file, encoding, (error, text){ console.log(text)})",
            "for Binary: No encoding Argument needed, its read in a object named buffer",
            "fs.writeFile(file, text, err => {})",
            "fs.mkdir(file, ,err =>{}) => Check to see if fs.existSync(filename)",
            "fs.appendFile(file, data, err =>{})",
            "Remove and renames file: fs.rename(filename, newfile, err =>{})",
            "Unlink: Remove => fs.unlink(filename, err=>{})",
            "Before removing dir: we need to dlete files in there: fs.readdirSync() => gets all filename",
            "Loop through each file name and use fs.unlink"
        ],
        "Files and Streams":[
            "ReadStream of data from terminal, nad other souces",
           "Read data as streams from file: fs.createReadStream(filename, if text then pass encoding)",
           "readStream.on('data', data=>{ Read chunk by chunk passed to this callback function })",
           "readStream.once('data',data=>{ Reads the first chunk of data and stops})",
           "readSteram.on('end', () =>{ triggers when the stream reading ends})",
           "Less memory and buffer needed to read a file",
            "Writable Stream: fs.createWriteStream(file, encoding)",
            "process.stdin.pipe(writeStream) => copies from terminal to the file of the write stream",
            "readSteram.pipe(writeStream) => copies the file from readSteram to Write Steram",
            "Node js has child processes to communictate with external applications",
            "Child process: Spwan and execute",
            "const cp = require(child_process)",
            "cp.exec('open linkedin.com/learning')",
            "cp.exec('ls', (err, data,stderr)=>{}) can be used to execute any synchonous process",
            "Spawn: Async process",
            "const cp = require('child_process') => include our child process",
            "const question = cp.spawn('command that we want to spawn',[]'all additional arguments')",
            "ex: const questionsApp = cp.spawn('node', ['questions.js']) ",
            "questionsApp.stdout.on('data', data=> {})"

        ],
        "Promise":[
            "A promise is an object that can be used to represent an eventual completion of an async operation",
            ".then methd takes functions that can be executed after succesful promise execution",
            "We can add further chains using .then to the excution that will be executed sequentially",
            "these then methods can be used to pass on data that can be used by next then function",
            "An error can be thrown anytime: like throw new Error('broken') => handle it after then using ",
            ".catch((error)=>{error handling code})",
            "We can also invoke the rejects method => on condition rejects(new Error(Error message))"
        ],
        "Callbacks":[
            "Errors in call back must pe passd as first argument",
             "The fuction passed as second argument is callback used to executed on completion of function"   ,
            "Converting callbacks into promises: let { promisify } = require('util') ",
            "Using promisify to convert callbacks into Promise saves us from callback hell or pyramid of doom => antipattern",
            "var { promisify} = require('util') ; var writefile = promisify(fs.writefile)",
            "var unlink = promisify(fs.unlink); ",
            "var delay = (seconds) => new Promise((resolves)=>{ setTimeout(resolves, seconds*1000)})",
            "Now when we have to write a sequential process with call backs using above code",
            "We do: const doStuffSeq = ()=> Promise.resolve().then(fn.).then().....catch()"
        ],
        "Sequential Access with Asnc/Await":[
            "Use async: It allows us to write code line by line , but execute it in async",
            "const dostuff = async() => { //Here we can tell certain lines to await for result before getting executed}",
            "{ await delay(2) ....}",
            "We can also handle errors for certain code segments with try catch block",
            "At last we return Promise.resolve()",
            "We can also call promises directly ex: const readdir= promisify(fs.readdir);",
            "readdir('dir').then((files) =>{})...chain it as such",
            "We can also chain in async fuction",
            "async function start(){ var files = await readdir('dir')}"
        ],
        "Parallel Execution":[
            "Promise.all([]).then() => takes in a array of promises and executes them in parallel ",
            "Promise.race() => resolves the fast process before resolving"
        ],
        "Concurrent Execution: Combinig Seq and Parallel":[
            "We can have a list of sync as well as async tasks  in an array",
            "for this we create a PromiseQueue class : constructor(promises=[], concurrentCount=1)",
            "We have 2 methods => get runAnother() and run()",
            "We pass them to an PromiseQueue(taskArray, no. of promises to be executed together)",
            "Ex. const delayQueue = new PromiseQueue(taskArray, 2)",
            "delayQueue.run() => "
        ],
        "Advanced Streams":[
            
        ]

    }
}